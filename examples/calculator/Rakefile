require 'u-case'

require_relative 'calc/operation'
require_relative 'calc/normalize_args'
require_relative 'calc/transform_into_numbers'

module Calc
  TransformArgsIntoNumbers =
    Micro::Case::Safe::Flow([NormalizeArgs, TransformIntoNumbers])

  module With
    Add = Micro::Case::Safe::Flow([TransformArgsIntoNumbers, Operation::Add])
    Divide = Micro::Case::Safe::Flow([TransformArgsIntoNumbers, Operation::Divide])
    Subtract = Micro::Case::Safe::Flow([TransformArgsIntoNumbers, Operation::Subtract])
    Multiply = Micro::Case::Safe::Flow([TransformArgsIntoNumbers, Operation::Multiply])
  end
end

class PerformTask < Micro::Case
  attributes :args, :operation

  def call!
    operation
      .call(args: args)
      .on_success { |value| print_operation(value) }
      .on_failure(:exception) { |err| puts "ERROR: #{err.message}" }
      .on_failure(:not_a_number) { puts "ERROR: The arguments must contain only numeric values" }
      .on_failure(:arguments_with_space_chars) do |(a, b)|
        puts "ERROR: Arguments can't have spaces: a: #{a}, b: #{b}"
      end
  end

  private def print_operation(a:, operator:, b:, result:)
    puts "#{a} #{operator} #{b} = #{result}"
  end
end

namespace :calc do
  desc 'adds two numbers'
  task :add, [:a, :b] do |_task, args|
    PerformTask.call(args: args, operation: Calc::With::Add)
  end

  desc 'divides two numbers'
  task :divide, [:a, :b] do |_task, args|
    PerformTask.call(args: args, operation: Calc::With::Divide)
  end

  desc 'subtracts two numbers'
  task :subtract, [:a, :b] do |_task, args|
    PerformTask.call(args: args, operation: Calc::With::Subtract)
  end

  desc 'multiplies two numbers'
  task :multiply, [:a, :b] do |_task, args|
    PerformTask.call(args: args, operation: Calc::With::Multiply)
  end
end
